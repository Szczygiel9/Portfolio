{"version":3,"sources":["resources/aws.jpg","components/ItemList.js","components/Header.js","data/SidebarData.js","components/Sidebar.js","components/ExperienceSection.js","data/ExperienceItems.js","data/Skills.js","components/SkillsSection.js","components/Description.js","data/Summary.js","components/MainContent.js","components/About.js","data/SampleProjects.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ItemList","projects","className","href","src","aws","alt","Header","exact","activeClassName","to","SidebarData","personalData","title","name","email","mediaData","linkedin","fieldName","link","displayValue","github","langData","value","Sidebar","ExperienceSection","content","map","experienceItem","position","dateFrom","dateTo","descriptionPoints","point","ExperienceItems","Skills","SkillsSection","item","Description","MainContent","About","App","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06779730.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/aws.d87ac8cd.jpg\";","import React from 'react';\r\nimport aws from '../resources/aws.jpg'\r\n\r\nconst ItemList = ({projects}) => {\r\n    return (\r\n        <div className='item-list'>\r\n\r\n            <div className='item'>\r\n                <h1>SimpleSample</h1>\r\n\r\n                <p>\r\n                    Github: <a className='link' href='https://github.com/Szczygiel9/SimpleSample'>link</a>\r\n                </p>\r\n\r\n                <p>Aplikacja pomagająca wypełniać bazę danych SQL testowymi danymi. Po podaniu struktury tabeli w\r\n                    postaci nazwy tabeli, nazw kolumn, typów kolumn, opcjonalnych typów instynktownych\r\n                    oraz potrzebnej liczby wierszy do wygenerowania użytkownik otrzymuje zapytanie INSERT,\r\n                    które wystarczy zaaplikować do swojej bazy danych.</p>\r\n\r\n                <p>Projekt został stworzony przy użyciu języka Java. Komunikacja została zapewniona poprzez REST api.\r\n                    Głównym endpoint'em dla użytkownika jest '/processTable', który przyjmuje w ciele zapytania strukturę\r\n                    tabeli oraz zwraca pożądany kod SQL. Poza typem kolumny możliwe jest podanie typu instynktowego.\r\n                    Jest jedna z wartości predefiniowanych typów, dla których zostanie wczytana wartość ze zbioru przykładowych\r\n                    danych (np. Anna dla typu 'name', Microsoft dla typu 'company).\r\n                    W celu utrwalenia przykładowych danych została wykorzystana baza danych NoSQL\r\n                    MongoDB.</p>\r\n\r\n                <p>Biblioteki wykorzystane w tym projekcie to:\r\n                    <ul>\r\n                        <li>Spring wraz z modułami: Core, Rest, Data oraz Spring Boot</li>\r\n                        <li>Lombok</li>\r\n                        <li>Apache Commons</li>\r\n                        <li>Swagger</li>\r\n                        <li>JUnit</li>\r\n                        <li>Jackson</li>\r\n                    </ul>\r\n                </p>\r\n\r\n                <p>\r\n                    Start serwera może się odbyć z profilem data-init - ładuje przykładowe dane (np. imiona, miasta)\r\n                    do bazy, z którą komunikuje się aplikacja serwerowa. Dane do załadowania są wcześniej przygotowane\r\n                    w postaci plików tekstowych. Utrwalenie tych danych zostało zaimplementowane przy użyciu Spring’owych\r\n                    auto-repozytorów, które dostarczają podstawowe operacje CRUD.\r\n                </p>\r\n\r\n                <p>\r\n                    Gotowa aplikacja została wdrożona na platformę AWS. W celu zbudowania aplikacji oraz jej deploymentu,\r\n                    został użyty serwis AWS CodePipeline wraz z narzędziami CodeBuild oraz CodeDeploy.\r\n                    Każdy wypchnięty commit do repozytorium GitHub wyzwala testy a następnie budowę paczki.\r\n                    Definicja pipeline'a została zawarta w pliku buildspec.yml. Sama aplikacja\r\n                    została wdrożona na serwis ElasticBeanstalk. Istancja aplikacji SimpleSample potrzebuje do działania\r\n                    bazy danych MongoDB. Jej instancja została zainstalowana na wirtualnej maszynie w serwisie EC2,\r\n                    przy użyciu środowiska Docker oraz oficjalnego obrazu MongoDB.\r\n                    Całość tworzy działąjącą strukturę CICD. Architektura została przedstawiona poniżej.\r\n                    <br/>\r\n                    <br/>\r\n                    <img src={aws} className='aws-image' alt=\"aws img\"/>\r\n                    <br/>\r\n                    <br/>\r\n\r\n                    Publiczny adres wystawionego API to: <a className='link' href=\"http://simple-sample.us-east-2.elasticbeanstalk.com\">link</a>.\r\n                    Testowanie jest również możliwe dzięki narzędziu Swagger, link: <a className='link' href=\"http://simple-sample.us-east-2.elasticbeanstalk.com/swagger-ui.html\">swagger</a>.\r\n                </p>\r\n            </div>\r\n\r\n            <div className='item'>\r\n                <h1>Portfolio</h1>\r\n                <p>\r\n                    Github: <a className='link' href='https://github.com/Szczygiel9/Portfolio'>link</a>\r\n                </p>\r\n                <p>\r\n                    Projekt tworzony w celu nauki JavaScript'u, CSS, React oraz HTML. Jest to statyczna strona\r\n                    internetowa będąca odpowiednikiem CV.\r\n                    <br/>\r\n                    Strona została zaprojektowana z dbałością o czytelność zarówno na urządzeniach o szerokim\r\n                    jak i wąskim ekranie. Do stworzenia nawigacji w górnej belce zostały użyte komponenty z pakietu\r\n                    'react-router-dom'. Sama aplikacja została wdrożona na serwis GitHub Pages.\r\n                </p>\r\n                <p>\r\n                    Do zrobienia:\r\n                    <ul>\r\n                        <li>obsługa przycisku zmiany języka</li>\r\n                        <li>uporządkowanie styli CSS</li>\r\n                        <li>poprawa responsywności oraz stylowaniana na urządzeniach mobilnych</li>\r\n                    </ul>\r\n                </p>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\nexport default ItemList;\r\n","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className='nav'>\r\n            <NavLink exact activeClassName='active-link' to=\"/\">O mnie</NavLink>\r\n            <NavLink activeClassName='active-link' to=\"/projects\">Projekty warte wspomnienia</NavLink>\r\n            <button className='language-switcher'>PL | EN</button>\r\n        </div>\r\n    );\r\n};\r\nexport default Header;\r\n","const personalData = {\r\n    title: \"Dane osobowe\",\r\n    name: \"Daniel Szczygielski\",\r\n    email: \"szczygielski.daniel38@gmail.com\"\r\n};\r\n\r\nconst linkedin = {\r\n    fieldName: \"LinkedIn: \",\r\n    link: \"https://www.linkedin.com/in/daniel-szczygielski-50b8a4154/\",\r\n    displayValue: \"Profil\"\r\n};\r\n\r\nconst github = {\r\n    fieldName: \"GitHub: \",\r\n    link: \"https://github.com/Szczygiel9\",\r\n    displayValue: \"szczygiel9\"\r\n};\r\n\r\nconst mediaData = {\r\n    title: \"Media\",\r\n    linkedin: linkedin,\r\n    github: github\r\n};\r\n\r\nconst langData = {\r\n    title: \"Język\",\r\n    value: \"Angielski w stopniu umożliwiającym płynną komunikacje z członkami zespołu\"\r\n};\r\n\r\nconst SidebarData = {\r\n    personalData: personalData,\r\n    mediaData: mediaData,\r\n    langData: langData\r\n};\r\nexport default SidebarData;\r\n\r\n","import React from 'react';\r\nimport SidebarData from \"../data/SidebarData\";\r\n\r\nconst Sidebar = () => {\r\n    return (\r\n        <div className='sidebar'>\r\n            <div className='image'></div>\r\n            <div className='sidebar-content'>\r\n                <div className='under-lined'>{SidebarData.personalData.title}</div>\r\n                <div className='sidebar-section'>\r\n                    <div>{SidebarData.personalData.name}</div>\r\n                    <div>{SidebarData.personalData.email}</div>\r\n                </div>\r\n\r\n                <div className='under-lined'>Media</div>\r\n                <div className='sidebar-section'>\r\n                    <div>\r\n                        {SidebarData.mediaData.linkedin.fieldName}\r\n                        <a className='link'\r\n                           href={SidebarData.mediaData.linkedin.link}>{SidebarData.mediaData.linkedin.displayValue}</a>\r\n                    </div>\r\n                    <div>\r\n                        {SidebarData.mediaData.github.fieldName} <a className='link'\r\n                                                                    href={SidebarData.mediaData.github.link}>{SidebarData.mediaData.github.displayValue}</a>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='under-lined'>{SidebarData.langData.title}</div>\r\n                <div className='sidebar-section'>{SidebarData.langData.value}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Sidebar;\r\n","import React from 'react';\r\n\r\nconst ExperienceSection = ({title, content}) => {\r\n    return (\r\n        <div className='section'>\r\n            <p className='section-title'>{title}</p>\r\n            {content.map((experienceItem) => {\r\n                return (\r\n                    <div>\r\n                        <p className='experience-position'>{experienceItem.position}</p>\r\n                        <p className='experience-date'>{experienceItem.dateFrom} - {experienceItem.dateTo}</p>\r\n                        <ul className='experience-list'>\r\n                            {experienceItem.descriptionPoints.map((point) => {\r\n                                return <li>{point}</li>\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n};\r\nexport default ExperienceSection;\r\n","const assecoExp = {\r\n    dateFrom: \"Maj 2018\",\r\n    dateTo: \"Sierpień 2019\",\r\n    position: \"Praktykant - Asseco Business Solutions\",\r\n    descriptionPoints: [\r\n        \"Tworzenie modelu dedykowanego do komunikacji typu REST\",\r\n        \"Tworzenie zaawansowanych serwisów typu REST\",\r\n        \"Hibernate - użycie biblioteki na potrzeby pobierania odpowiednich danych dziedzinowych\",\r\n        \"Spring - użycie biblioteki na potrzeby tworzenia serwisów dziedzinowych oraz typu REST\",\r\n        \"Swagger - konfiguracja i użycie biblioteki dokumentującej serwisy typu REST\",\r\n        \"Tworzenie testów jednostkowych wraz z weryfikacją przetwarzania równoległego\"\r\n    ]\r\n};\r\n\r\nconst sollersExp = {\r\n    dateFrom: \"Listopad 2019\",\r\n    dateTo: \"Obecnie\",\r\n    position: \"Developer - Sollers Consulting\",\r\n    descriptionPoints: [\r\n        \"Praca w metodyce Scrum\",\r\n        \"Praca w międzynarodowym zespole\",\r\n        \"Czynny udział w procesie code review\",\r\n        \"Implementacja wymagań biznesowych w technologii Guidewire\",\r\n        \"Aktywne uczestnictwo w ceremoniach Agile prowadzonych w języku angielskim\",\r\n        \"Implementacja usług serwisowych typu SOAP\",\r\n        \"Wyszukiwanie rozwiązań na podstawie dokumentacji\",\r\n        \"Tworzenie dokumentacji technicznej\"\r\n    ]\r\n};\r\n\r\nconst ExperienceItems = [sollersExp, assecoExp];\r\n\r\nexport default ExperienceItems;\r\n","const Skills = [\r\n    \"Dobra znajomość języka Java oraz framework'a Spring\",\r\n    \"Sprawne posługiwanie się systemem kontroli wersji GIT\",\r\n    \"Praktyczna znajomość projektowania oraz implementacji serwisów typu REST\",\r\n    \"Praca z narzędziami: IntelliJ, Jenkins, Jira\",\r\n    \"Znajomość zagadnień mapowania obiektowo relacyjnego, w tym freamework'a Hibernate\",\r\n    \"Tworzenie testów jednostkowy przy użyciu biblioteki JUnit oraz Mockito\",\r\n    \"Znajomość składni SQL\",\r\n    \"Świadome wykorzystwyanie wzorców projektowych, dobrych praktyk oraz refactoringu\",\r\n    \"W trakcie nauki: Docker, AWS, JavaScript, React\"];\r\n\r\nexport default Skills;\r\n","import React from 'react';\r\n\r\nconst SkillsSection = ({title, content}) => {\r\n    return (\r\n        <div className='section'>\r\n            <p className='section-title'>{title}</p>\r\n            <div>\r\n                <ul className='experience-list'>\r\n                    {\r\n                        content.map((item) => {\r\n                                return <li>{item}</li>\r\n                            }\r\n                        )\r\n                    }\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default SkillsSection;\r\n","import React from 'react';\r\nimport Summary from \"../data/Summary\";\r\n\r\nconst Description = () => {\r\n    return (\r\n        <div className='section'>\r\n            <p className='summary'>\r\n                {Summary}\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\nexport default Description;\r\n","const Summary = \"Jestem programistą z ponad rocznym doświadczeniem w technologiach z rodziny Java. Pracuję w sektorze ubezpieczeń oraz implementuję rozwiązania systemu Guidewire. Jestem zainteresowany rozwojem na stanowisku Java developer z elementami funkcji DevOps.\"\r\n\r\nexport default Summary;\r\n","import React from 'react';\r\nimport ExperienceSection from \"./ExperienceSection\";\r\nimport ExperienceItems from \"../data/ExperienceItems\";\r\nimport Skills from \"../data/Skills\";\r\nimport SkillsSection from \"./SkillsSection\";\r\nimport Description from \"./Description\";\r\n\r\nconst MainContent = () => {\r\n    return (\r\n        <div className='main-content'>\r\n            <Description/>\r\n            <ExperienceSection\r\n                title={\"Doświadczenie zawodowe\"}\r\n                content={ExperienceItems}/>\r\n            <SkillsSection\r\n                title={\"Umiejętności\"}\r\n                content={Skills}/>\r\n            <SkillsSection\r\n                title={\"Wykształcenie\"}\r\n                content={[\"2015-2019 Politechnika Lubelska, informatyka, tytuł: inżynier\"]}/>\r\n        </div>\r\n    );\r\n};\r\nexport default MainContent\r\n","import React from 'react';\r\nimport Sidebar from \"./Sidebar\";\r\nimport MainContent from \"./MainContent\";\r\n\r\nconst About = () => {\r\n    return (\r\n        <div className='about'>\r\n            <Sidebar/>\r\n            <MainContent/>\r\n        </div>\r\n    );\r\n};\r\nexport default About;\r\n","const simpleSample = {\r\n    title: \"Simple sample\",\r\n    content: \"Simple-sample Springowe moduły i biblioteki: Core, REST, Lombok, Apache Commons... Utrwalenie danych zostało zaimplementowane przy użyciu Spring’owych auto-repozytorów, które dostarczają podstawowe operacje CRUD. Przykładowe dane do generowania wyjściowych zapytań SQL są ładowane z plików tekstowych przy uruchomieniu aplikacji.Ładowanie danych z pliku tekstowegoprofile z data init, mock i devNa podstawie zbudowanej paczki jar został stworzony obraz Docker. W celu sprawniejszego budowania obrazu w trakcie rozwijania aplikacji został użyty Dockerfile Maven plugin. Do poprawnego aplikacji działania niezbędna jest baza MongoDB, która została dostarczona również poprzez środowisko Docker. Kontener aplikacji i bazy danych zostały skomponowane przy użyciu docker-compose, a następnie wdrożone na platformę Amazon Web Services. Publiczny adres wystawionego api to: http://ec2-3-134-94-181.us-east-2.compute.amazonaws.com. Przykładowe request’y testujące można znależć <tutaj\"\r\n};\r\n\r\nconst portfolio = {\r\n    title: \"Portfolio\",\r\n    content: \"Sample content2\"\r\n};\r\n\r\nconst projects = [simpleSample, portfolio];\r\nexport default projects\r\n","import React from 'react';\nimport './App.css';\nimport ItemList from \"./components/ItemList\";\nimport Header from \"./components/Header\";\nimport {HashRouter as Router, Route} from 'react-router-dom';\nimport About from \"./components/About\";\nimport projects from \"./data/SampleProjects\";\n\nfunction App() {\n    return (\n        <Router basename={\"/Portfolio/\"}>\n            <div className=\"App\">\n                <Header/>\n                <div className='main-container'>\n                    <Route exact path={\"/\"} component={About}/>\n                    <Route path={\"/projects\"}\n                           component={() => <ItemList projects={projects}/>}/>\n                </div>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}