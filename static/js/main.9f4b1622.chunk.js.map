{"version":3,"sources":["components/Item.js","components/ItemList.js","components/Header.js","components/About.js","data/SampleProjects.js","App.js","serviceWorker.js","index.js"],"names":["Item","title","content","className","ItemList","projects","map","project","Header","exact","activeClassName","to","About","sampleProject3","sampleProject4","sampleProject5","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAUeA,G,YARF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QAClB,OACI,yBAAKC,UAAU,QACX,4BAAKF,GACL,2BAAIC,MCYDE,EAfE,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACf,OACI,yBAAKF,UAAU,YAEPE,EAASC,KACL,SAAUC,GACN,OACI,kBAAC,EAAD,CAAMN,MAAOM,EAAQN,MAAOC,QAASK,EAAQL,e,OCC1DM,EARA,WACX,OACI,yBAAKL,UAAU,OACX,kBAAC,IAAD,CAASM,OAAK,EAACC,gBAAgB,aAAaC,GAAG,KAA/C,UACA,kBAAC,IAAD,CAASD,gBAAgB,aAAaC,GAAG,aAAzC,mC,OCEGC,EAPD,WACV,OACI,yBAAKT,UAAU,SACX,+CCINU,EAAiB,CACnBZ,MAAO,gBACPC,QAAS,mBAEPY,EAAiB,CACnBb,MAAO,gBACPC,QAAS,mBAEPa,EAAiB,CACnBd,MAAO,gBACPC,QAAS,mBA2CEG,EAxCE,CAtBM,CACnBJ,MAAO,gBACPC,QAAS,mBAGU,CACnBD,MAAO,gBACPC,QAAS,mBAiBTW,EACAC,EACAC,EACAF,EACAC,EACAC,EACAA,EACAF,EACAC,EACAC,EACAD,EACAC,EACAF,EACAC,EACAC,EACAA,EACAF,EACAC,EACAD,EACAC,EACAC,EACAF,EACAC,EACAC,EACAA,EACAF,EACAC,EACAC,EACAD,EACAC,EACAF,EACAC,EACAC,EACAA,EACAF,EACAC,EACAC,GCxCWC,MAZf,WACI,OACI,kBAAE,IAAF,KACI,yBAAKb,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOM,OAAK,EAACQ,KAAK,IAAIC,UAAWN,IACjC,kBAAC,IAAD,CAAOK,KAAK,YAAYC,UAAW,kBAAM,kBAAC,EAAD,CAAUb,SAAUA,UCFzDc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9f4b1622.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Item = ({title, content}) => {\r\n    return (\r\n        <div className='Item'>\r\n            <h1>{title}</h1>\r\n            <p>{content}</p>\r\n        </div>\r\n    );\r\n};\r\nexport default Item;","import React from 'react';\r\nimport Item from \"./Item\";\r\n\r\nconst ItemList = ({projects}) => {\r\n    return (\r\n        <div className='ItemList'>\r\n            {\r\n                projects.map(\r\n                    function (project) {\r\n                        return (\r\n                            <Item title={project.title} content={project.content}/>\r\n                        )\r\n                    }\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n};\r\nexport default ItemList;","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className='Nav'>\r\n            <NavLink exact activeClassName='ActiveLink' to=\"/\">O mnie</NavLink>\r\n            <NavLink activeClassName='ActiveLink' to=\"/projects\">Repozytoria warte wspomnienia</NavLink>\r\n        </div>\r\n    );\r\n};\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst About = () => {\r\n    return (\r\n        <div className='About'>\r\n            <h2>Strona o mnie</h2>\r\n        </div>\r\n    );\r\n};\r\nexport default About;\r\n","const sampleProject1 = {\r\n    title: \"Sample Title1\",\r\n    content: \"Sample content1\"\r\n};\r\n\r\nconst sampleProject2 = {\r\n    title: \"Sample Title2\",\r\n    content: \"Sample content2\"\r\n};\r\nconst sampleProject3 = {\r\n    title: \"Sample Title2\",\r\n    content: \"Sample content2\"\r\n};\r\nconst sampleProject4 = {\r\n    title: \"Sample Title2\",\r\n    content: \"Sample content2\"\r\n};\r\nconst sampleProject5 = {\r\n    title: \"Sample Title2\",\r\n    content: \"Sample content2\"\r\n};\r\n\r\nconst projects = [sampleProject1,\r\n    sampleProject2,\r\n    sampleProject3,\r\n    sampleProject4,\r\n    sampleProject5,\r\n    sampleProject3,\r\n    sampleProject4,\r\n    sampleProject5,\r\n    sampleProject5,\r\n    sampleProject3,\r\n    sampleProject4,\r\n    sampleProject5,\r\n    sampleProject4,\r\n    sampleProject5,\r\n    sampleProject3,\r\n    sampleProject4,\r\n    sampleProject5,\r\n    sampleProject5,\r\n    sampleProject3,\r\n    sampleProject4,\r\n    sampleProject3,\r\n    sampleProject4,\r\n    sampleProject5,\r\n    sampleProject3,\r\n    sampleProject4,\r\n    sampleProject5,\r\n    sampleProject5,\r\n    sampleProject3,\r\n    sampleProject4,\r\n    sampleProject5,\r\n    sampleProject4,\r\n    sampleProject5,\r\n    sampleProject3,\r\n    sampleProject4,\r\n    sampleProject5,\r\n    sampleProject5,\r\n    sampleProject3,\r\n    sampleProject4,\r\n    sampleProject5\r\n];\r\nexport default projects\r\n","import React from 'react';\nimport './App.css';\nimport ItemList from \"./components/ItemList\";\nimport Header from \"./components/Header\";\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport About from \"./components/About\";\nimport projects from \"./data/SampleProjects\";\n\nfunction App() {\n    return (\n        < Router>\n            <div className=\"App\">\n                <Header/>\n                <Route exact path=\"/\" component={About}/>\n                <Route path=\"/projects\" component={() => <ItemList projects={projects}/>}/>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}